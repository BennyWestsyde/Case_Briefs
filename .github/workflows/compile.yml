name: Build macOS App (PyInstaller)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write   # needed for creating the tag & release and uploading assets

jobs:
  build:
    strategy:
      matrix:
        include:
          - arch: x86_64
            runner: macos-13   # Intel runner
          - arch: arm64
            runner: macos-14   # Apple Silicon runner
    runs-on: ${{ matrix.runner }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          pip install pyinstaller

      - name: Build with PyInstaller (spec file)
        shell: bash
        run: |
          pyinstaller CaseBriefs.spec
          test -d dist/CaseBriefs.app

      - name: Package .app as zip (preserve metadata)
        shell: bash
        run: |
          cd dist
          ditto -c -k --sequesterRsrc --keepParent "CaseBriefs.app" "CaseBriefs-${{ matrix.arch }}.zip"
          ls -lah "CaseBriefs-${{ matrix.arch }}.zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: CaseBriefs-${{ matrix.arch }}
          path: dist/CaseBriefs-${{ matrix.arch }}.zip
          if-no-files-found: error

  release:
    name: Create Release & Upload Assets
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out (for tag creation)
        uses: actions/checkout@v4

      - name: Create tag if it doesn't exist
        shell: bash
        run: |
          TAG='${{ inputs.version }}'
          if git ls-remote --tags origin | grep -q "refs/tags/${TAG}$"; then
            echo "Tag ${TAG} already exists."
          else
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag -a "${TAG}" -m "Release ${TAG}"
            git push origin "${TAG}"
          fi

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded files (debug)
        run: |
          find artifacts -type f -maxdepth 3 -print

      - name: Create GitHub Release (or update if exists)
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ inputs.version }}
          release_name: CaseBriefs ${{ inputs.version }}
          body: |
            Universal macOS build artifacts generated by PyInstaller.

            - x86_64: CaseBriefs-x86_64.zip
            - arm64:  CaseBriefs-arm64.zip
          draft: false
          prerelease: false

      - name: Upload x86_64 asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/CaseBriefs-x86_64/CaseBriefs-x86_64.zip
          asset_name: CaseBriefs-x86_64.zip
          asset_content_type: application/zip

      - name: Upload arm64 asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/CaseBriefs-arm64/CaseBriefs-arm64.zip
          asset_name: CaseBriefs-arm64.zip
          asset_content_type: application/zip
